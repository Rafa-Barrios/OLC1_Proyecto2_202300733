/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,9],$V2=[1,10],$V3=[1,23],$V4=[1,24],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,39],$Vb=[1,31],$Vc=[1,25],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[2,5,12,13,25,37,38,42,48,51,52,54,57,91,92,93,94,95,96,97],$Vj=[1,52],$Vk=[1,63],$Vl=[1,70],$Vm=[1,64],$Vn=[1,65],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,72],$Vt=[1,71],$Vu=[25,30,40],$Vv=[1,102],$Vw=[1,101],$Vx=[1,103],$Vy=[1,104],$Vz=[1,105],$VA=[1,106],$VB=[1,93],$VC=[1,94],$VD=[1,95],$VE=[1,96],$VF=[1,97],$VG=[1,98],$VH=[1,99],$VI=[1,100],$VJ=[9,26,31,40,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$VK=[9,26,31,40,72,73,86,87],$VL=[2,58],$VM=[1,168],$VN=[9,26,31,40],$VO=[9,26,31,40,72,73,80,81,82,83,84,85,86,87],$VP=[9,26,31,40,72,73,74,75,80,81,82,83,84,85,86,87],$VQ=[9,26,31,40,72,73,74,75,76,77,79,80,81,82,83,84,85,86,87],$VR=[26,40],$VS=[2,5,12,13,25,37,38,42,46,47,48,51,52,54,57,91,92,93,94,95,96,97],$VT=[26,31];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VAR":7,"REASIGNACION":8,"TK_puntoComa":9,"REASIGNACION_VECTOR":10,"IMPRIMIR":11,"TK_detener":12,"TK_continuar":13,"LLAMADA_FUNCION":14,"INCREMENTO_DECREMENTO_FIN":15,"CONDICIONAL_SI":16,"CICLO_MIENTRAS":17,"CICLO_PARA":18,"CICLO_HACER_HASTA_QUE":19,"FUNCION_CON_PARAM":20,"RETORNAR":21,"DECLARACION_VECTOR":22,"PROCEDIMIENTO_DECLARACION":23,"LISTA_IDS":24,"TK_id":25,"TK_coma":26,"LISTA_EXPRESIONES":27,"EXPRESION":28,"LISTA_LISTAS_EXPRESIONES":29,"TK_corcheteAbre":30,"TK_corcheteCierra":31,"TIPO":32,"TK_con":33,"TK_valor":34,"TK_asignacion":35,"TK_vector":36,"TK_imprimir":37,"TK_if":38,"TK_parAbre":39,"TK_parCierra":40,"TK_llaveAbre":41,"TK_llaveCierra":42,"ELSE_IFS":43,"ELSE_FINAL":44,"ELSE_IF":45,"TK_else":46,"TK_deLoContrario":47,"TK_mientras":48,"ACTUALIZACION_FOR":49,"INCREMENTO_DECREMENTO_FOR":50,"TK_para":51,"TK_hacer":52,"TK_hastaQue":53,"TK_funcion":54,"LISTA_PARAMETROS_OPCIONAL":55,"PROCEDIMIENTO_DECLARACION_CON_PAR":56,"TK_procedimiento":57,"PROCEDIMIENTO_DECLARACION_SIN_PAR":58,"LISTA_PARAMETROS":59,"PARAMETRO":60,"TERNARIO":61,"RELACIONALES":62,"LOGICOS":63,"ARITMETICOS":64,"CASTEO":65,"TK_int":66,"TK_decimal":67,"TK_string":68,"TK_char":69,"TK_true":70,"TK_false":71,"TK_interrogacion":72,"TK_dosPuntos":73,"TK_menos":74,"TK_mas":75,"TK_multiplicacion":76,"TK_division":77,"TK_potencia":78,"TK_modulo":79,"TK_igualdad":80,"TK_diferente":81,"TK_mayor":82,"TK_menor":83,"TK_mayorIgual":84,"TK_menorIgual":85,"TK_and":86,"TK_or":87,"TK_not":88,"TK_incremento":89,"TK_decremento":90,"TK_retornar":91,"TK_ejecutar":92,"TK_entero":93,"TK_double":94,"TK_cadena":95,"TK_boolean":96,"TK_caracter":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"TK_puntoComa",12:"TK_detener",13:"TK_continuar",25:"TK_id",26:"TK_coma",30:"TK_corcheteAbre",31:"TK_corcheteCierra",33:"TK_con",34:"TK_valor",35:"TK_asignacion",36:"TK_vector",37:"TK_imprimir",38:"TK_if",39:"TK_parAbre",40:"TK_parCierra",41:"TK_llaveAbre",42:"TK_llaveCierra",46:"TK_else",47:"TK_deLoContrario",48:"TK_mientras",51:"TK_para",52:"TK_hacer",53:"TK_hastaQue",54:"TK_funcion",57:"TK_procedimiento",66:"TK_int",67:"TK_decimal",68:"TK_string",69:"TK_char",70:"TK_true",71:"TK_false",72:"TK_interrogacion",73:"TK_dosPuntos",74:"TK_menos",75:"TK_mas",76:"TK_multiplicacion",77:"TK_division",78:"TK_potencia",79:"TK_modulo",80:"TK_igualdad",81:"TK_diferente",82:"TK_mayor",83:"TK_menor",84:"TK_mayorIgual",85:"TK_menorIgual",86:"TK_and",87:"TK_or",88:"TK_not",89:"TK_incremento",90:"TK_decremento",91:"TK_retornar",92:"TK_ejecutar",93:"TK_entero",94:"TK_double",95:"TK_cadena",96:"TK_boolean",97:"TK_caracter"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[24,1],[24,3],[27,1],[27,3],[29,3],[29,5],[7,6],[7,3],[7,5],[7,3],[7,6],[7,5],[22,11],[22,16],[22,9],[22,11],[8,3],[10,6],[10,9],[11,2],[16,9],[43,0],[43,2],[45,8],[44,0],[44,4],[17,7],[49,1],[49,1],[18,11],[19,8],[20,9],[56,8],[58,5],[23,1],[23,1],[55,0],[55,1],[59,1],[59,3],[60,4],[60,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,3],[28,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,3],[28,4],[28,7],[61,5],[64,2],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[63,3],[63,3],[63,2],[15,3],[15,3],[50,2],[50,2],[65,4],[21,2],[14,4],[14,5],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return []
break;
case 3:
 if (Array.isArray($$[$0])) this.$.push(...$$[$0]); else this.$.push($$[$0]); 
break;
case 4:
 this.$ = Array.isArray($$[$0]) ? [...$$[$0]] : [$$[$0]]; 
break;
case 5: case 12: case 13: case 14: case 15: case 16: case 17: case 19: case 64: case 65: case 66: case 67: case 68: case 69:
this.$ = $$[$0]
break;
case 6: case 7: case 8: case 11: case 18: case 79:
this.$ = $$[$0-1]
break;
case 9:
 this.$ = new Detener(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 10:
 this.$ = new Continuar(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 20:
this.$ = $$[$0];
break;
case 21:
errores.push(new Error(this._$.first_line, this._$.first_column + 1, TipoError.SINTACTICO, `No se esperaba «${yytext}»`))
break;
case 22: case 24: case 60:
 this.$ = [$$[$0]]; 
break;
case 23: case 25: case 61:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 26:
 this.$ = [$$[$0-1]]; 
break;
case 27:
 $$[$0-4].push($$[$0-1]); this.$ = $$[$0-4]; 
break;
case 28:
 this.$ = new DeclaracionID(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-5], $$[$0-1]); 
break;
case 29:
 this.$ = new DeclaracionID(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0-2], null); 
break;
case 30:
 this.$ = new DeclaracionID(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-4], $$[$0-1]); 
break;
case 31:
 this.$ = []; var idsList = $$[$0-1]; for (var i = 0; i < idsList.length; i++) { this.$.push(new DeclaracionID(_$[$0-2].first_line, _$[$0-2].first_column, idsList[i], $$[$0-2], null)); } 
break;
case 32:
 this.$ = []; var idsList = $$[$0-4]; var valoresList = $$[$0-1]; for (var i = 0; i < idsList.length; i++) { var val = (i < valoresList.length) ? valoresList[i] : null; this.$.push(new DeclaracionID(_$[$0-5].first_line, _$[$0-5].first_column, idsList[i], $$[$0-5], val)); } 
break;
case 33:
 this.$ = []; var idsList = $$[$0-3]; var valoresList = $$[$0-1]; for (var i = 0; i < idsList.length; i++) { var val = (i < valoresList.length) ? valoresList[i] : null; this.$.push(new DeclaracionID(_$[$0-4].first_line, _$[$0-4].first_column, idsList[i], $$[$0-4], val)); } 
break;
case 34:

            // Ejemplo: entero[] vector1 = vector entero[3];
            this.$ = new DeclaracionVector(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-7], $$[$0-10], null, 1, $$[$0-2]);
        
break;
case 35:

            // Ejemplo: caracter[][] vector2 = vector caracter[2][2];
            this.$ = new DeclaracionVector(_$[$0-15].first_line, _$[$0-15].first_column, $$[$0-10], $$[$0-15], null, 2, [$$[$0-5], $$[$0-1]]);
        
break;
case 36:

            // Ejemplo: cadena[] vector3 = ["Hola", "Mundo"];
            this.$ = new DeclaracionVector(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-5], $$[$0-8], $$[$0-2], 1, null);
        
break;
case 37:

            // Ejemplo: entero[][] vector4 = [[1,2],[3,4]];
            this.$ = new DeclaracionVector(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-5], $$[$0-10], $$[$0-2], 2, null);
        
break;
case 38:
this.$ = new Reasignacion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 39:
 this.$ = new ReasignacionVector(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-5], [$$[$0-3]], $$[$0]); 
break;
case 40:
 this.$ = new ReasignacionVector(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-8], [$$[$0-6], $$[$0-3]], $$[$0]); 
break;
case 41:
this.$ = new Imprimir(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 42:

            // Crear el bloque principal
            let siInst = new Si(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-3]);

            // Agregar todos los else if
            if ($$[$0-1]) {
                for (let ei of $$[$0-1]) {
                    siInst.agregarElseIf(ei.condicion, ei.instrucciones);
                }
            }

            // Agregar else final si existe
            if ($$[$0]) {
                siInst.agregarElse($$[$0]);
            }

            this.$ = siInst;
        
break;
case 43: case 58:
 this.$ = []; 
break;
case 44:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 45:
 this.$ = { condicion: $$[$0-4], instrucciones: $$[$0-1] }; 
break;
case 46:
 this.$ = null; 
break;
case 47:
 this.$ = $$[$0-1]; 
break;
case 48:
 // Crear la instrucción Mientras con línea, columna, condición e instrucciones
        this.$ = new Mientras(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]); 
break;
case 51:
 this.$ = new Para(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 52:
 this.$ = new HacerHastaQue(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-1]); 
break;
case 53:
 this.$ = new Funcion(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-7], $$[$0-4] || [], $$[$0-1]); 
break;
case 54:
 this.$ = new Procedimiento( _$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4] || [], $$[$0-1] ); 
break;
case 55:
 this.$ = new Procedimiento( _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], [], $$[$0-1] ); 
break;
case 59:
 this.$ = $$[$0]; 
break;
case 62:
 this.$ = { nombre: $$[$0-2], tipo: $$[$0-3], valor: $$[$0] }; 
break;
case 63:
 this.$ = { nombre: $$[$0], tipo: $$[$0-1], valor: null }; 
break;
case 70:
 this.$ = new LlamadaFuncion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],[]); 
break;
case 71:
 this.$ = new LlamadaFuncion(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-3],$$[$0-1]); 
break;
case 72:
this.$ = new AccesoID(_$[$0].first_line, _$[$0].first_column, $$[$0]              )
break;
case 73:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.ENTERO)
break;
case 74:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.DOUBLE)
break;
case 75:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.CADENA)
break;
case 76:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.CARACTER)
break;
case 77:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, true, Tipo.BOOLEANO)
break;
case 78:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, false, Tipo.BOOLEANO)
break;
case 80:
 this.$ = new AccesoVector(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], [$$[$0-1]]); 
break;
case 81:
 this.$ = new AccesoVector(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-6], [$$[$0-4], $$[$0-1]]); 
break;
case 82:
 this.$ = new Ternario(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 83:
 this.$ = new Aritmetico(
                        _$[$0-1].first_line,
                        _$[$0-1].first_column,
                        new Primitivo(_$[$0-1].first_line, _$[$0-1].first_column, 0, Tipo.ENTERO),
                        $$[$0-1],
                        $$[$0]
                    ); 
break;
case 84: case 85: case 86: case 87: case 88: case 89:
this.$ = new Aritmetico(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 90: case 91: case 92: case 93: case 94: case 95:
this.$ = new Relacional(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 96: case 97:
this.$ = new Logico(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 98:
this.$ = new Logico(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 99:
 this.$ = new Incremento(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2]); 
break;
case 100:
 this.$ = new Decremento(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2]); 
break;
case 101:
 this.$ = new Incremento(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]); 
break;
case 102:
 this.$ = new Decremento(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]); 
break;
case 103:
 this.$ = new Casteo(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 104:
this.$ = new Retorno(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 105:
 this.$ = new LlamadaFuncion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], []); 
break;
case 106:
 this.$ = new LlamadaFuncion(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-1]); 
break;
case 107:
this.$ = Tipo.ENTERO
break;
case 108:
this.$ = Tipo.DOUBLE
break;
case 109:
this.$ = Tipo.CADENA
break;
case 110:
this.$ = Tipo.BOOLEANO
break;
case 111:
this.$ = Tipo.CARACTER
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{1:[3]},{2:$V0,5:[1,40],6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{1:[2,2]},o($Vi,[2,4]),o($Vi,[2,5]),{9:[1,42]},{9:[1,43]},{9:[1,44]},{9:[1,45]},{9:[1,46]},{9:[1,47]},o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),{9:[1,48]},o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),{24:50,25:[1,49],30:[1,51]},{30:[1,53],35:$Vj,89:[1,54],90:[1,55]},{14:62,25:$Vk,28:56,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{25:[1,73]},{39:[1,74]},{39:[1,75]},{39:[1,76]},{41:[1,77]},{32:78,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{14:62,25:$Vk,28:79,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},o($Vi,[2,56]),o($Vi,[2,57]),o($Vu,[2,107]),o($Vu,[2,108]),o($Vu,[2,109]),o($Vu,[2,110]),o($Vu,[2,111]),{25:[1,80]},{1:[2,1]},o($Vi,[2,3]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,18]),{9:[1,82],26:[2,22],33:[1,81],35:[1,83]},{9:[1,84],26:[1,87],33:[1,85],35:[1,86]},{31:[1,88]},{14:62,25:$Vk,28:89,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:90,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{9:[1,91]},{9:[1,92]},{9:[2,41],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($VJ,[2,64]),o([9,26,31,40,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],[2,65],{72:[1,107]}),o($VJ,[2,66]),o($VJ,[2,67]),o($VJ,[2,68]),o($VJ,[2,69]),o($VJ,[2,72],{30:[1,109],39:[1,108]}),o($VJ,[2,73]),o($VJ,[2,74]),o($VJ,[2,75]),o($VJ,[2,76]),o($VJ,[2,77]),o($VJ,[2,78]),{14:62,25:$Vk,28:110,32:111,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{14:62,25:$Vk,28:112,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:113,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{39:[1,114]},{14:62,25:$Vk,28:115,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:116,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{8:117,25:[1,118]},{2:$V0,4:119,6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{25:[1,120]},{9:[2,104],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{39:[1,121],41:[1,122]},{34:[1,123]},o($Vi,[2,29]),{14:62,25:$Vk,28:124,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},o($Vi,[2,31]),{34:[1,125]},{14:62,25:$Vk,27:126,28:127,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{25:[1,128]},{25:[1,129],30:[1,130]},o([9,40],[2,38],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),{31:[1,131],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($Vi,[2,99]),o($Vi,[2,100]),{14:62,25:$Vk,28:132,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:133,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:134,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:135,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:136,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:137,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:138,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:139,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:140,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:141,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:142,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:143,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:144,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:145,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:146,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,27:148,28:127,39:$Vl,40:[1,147],61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:149,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{40:[1,150],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{40:[1,151]},o($VK,[2,98],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($VJ,[2,83]),{14:62,25:$Vk,27:153,28:127,39:$Vl,40:[1,152],61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{40:[1,154],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{40:[1,155],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{9:[1,156]},{35:$Vj},{2:$V0,6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,42:[1,157],48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{39:[1,158]},{32:162,40:$VL,55:159,59:160,60:161,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{2:$V0,4:163,6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{14:62,25:$Vk,28:164,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{9:[1,165],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{14:62,25:$Vk,27:166,28:127,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{9:[1,167],26:$VM},o($VN,[2,24],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),o([9,26,33,35],[2,23]),{35:[1,169]},{31:[1,170]},{30:[1,172],35:[1,171]},o($VO,[2,90],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($VO,[2,91],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($VO,[2,92],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($VO,[2,93],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($VO,[2,94],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($VO,[2,95],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($VK,[2,96],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o([9,26,31,40,72,73,87],[2,97],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH}),o($VP,[2,84],{76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($VP,[2,85],{76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($VQ,[2,86],{78:$Vz}),o($VQ,[2,87],{78:$Vz}),o($VQ,[2,88],{78:$Vz}),o($VQ,[2,89],{78:$Vz}),{73:[1,173],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($VJ,[2,70]),{26:$VM,40:[1,174]},{31:[1,175],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($VJ,[2,79]),{14:62,25:$Vk,28:176,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},o($VJ,[2,105]),{26:$VM,40:[1,177]},{41:[1,178]},{41:[1,179]},{14:62,25:$Vk,28:180,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{53:[1,181]},{32:162,40:$VL,55:182,59:160,60:161,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{40:[1,183]},{26:[1,184],40:[2,59]},o($VR,[2,60]),{25:[1,185]},{2:$V0,6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,42:[1,186],48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{9:[1,187],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($Vi,[2,30]),{9:[1,188],26:$VM},o($Vi,[2,33]),{14:62,25:$Vk,28:189,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{30:[1,191],36:[1,190]},{25:[1,192]},{14:62,25:$Vk,28:193,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:194,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{14:62,25:$Vk,28:195,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},o($VJ,[2,71]),o($VJ,[2,80],{30:[1,196]}),o([9,26,31,40,72,73],[2,103],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),o($VJ,[2,106]),{2:$V0,4:197,6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{2:$V0,4:198,6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{9:[1,199],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{39:[1,200]},{40:[1,201]},{41:[1,202]},{32:162,60:203,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VR,[2,63],{35:[1,204]}),o($Vi,[2,55]),o($Vi,[2,28]),o($Vi,[2,32]),o($VN,[2,25],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),{32:205,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{14:62,25:$Vk,27:206,28:127,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{35:[1,207]},{9:[2,39],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{31:[1,208],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($VJ,[2,82]),{14:62,25:$Vk,28:209,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{2:$V0,6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,42:[1,210],48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{2:$V0,6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,42:[1,211],48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{8:213,25:[1,215],49:212,50:214},{14:62,25:$Vk,28:216,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{41:[1,217]},{2:$V0,4:218,6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VR,[2,61]),{14:62,25:$Vk,28:219,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{30:[1,220]},{26:$VM,31:[1,221]},{30:[1,223],36:[1,222]},{35:[1,224]},{31:[1,225],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($VS,[2,43],{43:226}),o($Vi,[2,48]),{40:[1,227]},{40:[2,49]},{40:[2,50]},{35:$Vj,89:[1,228],90:[1,229]},{40:[1,230],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{2:$V0,4:231,6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{2:$V0,6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,42:[1,232],48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VR,[2,62],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),{14:62,25:$Vk,28:233,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{9:[1,234]},{32:235,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{29:236,30:[1,237]},{14:62,25:$Vk,28:238,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},o($VJ,[2,81]),o($Vi,[2,46],{44:239,45:240,46:[1,242],47:[1,241]}),{41:[1,243]},{40:[2,101]},{40:[2,102]},o($Vi,[2,52]),{2:$V0,6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,42:[1,244],48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($Vi,[2,54]),{31:[1,245],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($Vi,[2,36]),{30:[1,246]},{26:[1,248],31:[1,247]},{14:62,25:$Vk,27:249,28:127,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{9:[2,40],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($Vi,[2,42]),o($VS,[2,44]),{41:[1,250]},{38:[1,251]},{2:$V0,4:252,6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($Vi,[2,53]),{9:[1,253]},{14:62,25:$Vk,28:254,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},{9:[1,255]},{30:[1,256]},{26:$VM,31:[1,257]},{2:$V0,4:258,6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{39:[1,259]},{2:$V0,6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,42:[1,260],48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($Vi,[2,34]),{31:[1,261],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($Vi,[2,37]),{14:62,25:$Vk,27:262,28:127,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},o($VT,[2,26]),{2:$V0,6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,42:[1,263],48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{14:62,25:$Vk,28:264,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},o($Vi,[2,51]),{30:[1,265]},{26:$VM,31:[1,266]},o($Vi,[2,47]),{40:[1,267],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{14:62,25:$Vk,28:268,39:$Vl,61:57,62:58,63:59,64:60,65:61,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,74:$Vs,88:$Vt,92:$Vc},o($VT,[2,27]),{41:[1,269]},{31:[1,270],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{2:$V0,4:271,6:4,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{9:[1,272]},{2:$V0,6:41,7:5,8:6,10:7,11:8,12:$V1,13:$V2,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V3,32:22,37:$V4,38:$V5,42:[1,273],48:$V6,51:$V7,52:$V8,54:$V9,56:32,57:$Va,58:33,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($Vi,[2,35]),o($VS,[2,45])],
defaultActions: {3:[2,2],40:[2,1],213:[2,49],214:[2,50],228:[2,101],229:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // Javascript
    let { errores } = require ('../Clases/Utilidades/Salida');
    const { Error } = require('../Clases/Utilidades/Error');
    const { TipoError } = require('../Clases/Utilidades/TipoError');

    // Javascript
    // Tipos
    const { Tipo } = require('../Clases/Utilidades/Tipo');
    // Expresiones
    const { Primitivo } = require('../Clases/Expresiones/Primitivo');
    const { AccesoID } = require('../Clases/Expresiones/AccesoID');
    const { Aritmetico } = require('../Clases/Expresiones/Aritmetico');
    const { Ternario } = require('../Clases/Expresiones/Ternario');
    const { Casteo } = require('../Clases/Expresiones/Casteo');
    const { Relacional } = require('../Clases/Expresiones/Relacional');
    const { Logico } = require('../Clases/Expresiones/Logico');
    const { Retorno } = require('../Clases/Expresiones/Retorno');
    const { LlamadaFuncion } = require('../Clases/Expresiones/LlamadaFuncion');
    // Instrucciones
    const { DeclaracionID } = require('../Clases/Instrucciones/DeclaracionID');
    const { Reasignacion } = require('../Clases/Instrucciones/Reasignacion');
    const { Imprimir } = require('../Clases/Instrucciones/Imprimir');
    const { Si } = require('../Clases/Instrucciones/Si');
    const { Funcion } = require('../Clases/Instrucciones/Funcion');
    const { Mientras } = require('../Clases/Instrucciones/Mientras');
    const { Para } = require('../Clases/Instrucciones/Para');
    const { HacerHastaQue } = require('../Clases/Instrucciones/HacerHastaQue');
    const { Incremento } = require('../Clases/Instrucciones/Incremento');
    const { Decremento } = require('../Clases/Instrucciones/Decremento');
    const { AccesoVector } = require('../Clases/Expresiones/AccesoVector');
    const { DeclaracionVector } = require('../Clases/Instrucciones/DeclaracionVector');
    const { ReasignacionVector } = require('../Clases/Instrucciones/ReasignacionVector');
    const { Detener } = require('../Clases/Instrucciones/Detener');
    const { Continuar } = require('../Clases/Instrucciones/Continuar');
    const { Procedimiento } = require('../Clases/Instrucciones/Procedimiento');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: return 93   
break;
case 3: return 94   
break;
case 4: return 96  
break;
case 5: return 70     
break;
case 6: return 71    
break;
case 7: return 95   
break;
case 8: return 97 
break;
case 9: return 33      
break;
case 10: return 34    
break;
case 11: return 37 
break;
case 12: return 38       
break;
case 13: return 46     
break;
case 14: return 47
break;
case 15: return 51     
break;
case 16: return 48 
break;
case 17: return 52    
break;
case 18: return 53 
break;
case 19: return 54  
break;
case 20: return 91 
break;
case 21: return 12  
break;
case 22: return 13
break;
case 23: return 92 
break;
case 24: return 36   
break;
case 25: return 'TK_de'       
break;
case 26: return 57
break;
case 27:/* Ignorar comentario de una línea */
break;
case 28:/* Ignorar comentario multilínea */
break;
case 29: return 25     
break;
case 30: yy_.yytext = yy_.yytext.slice(1, yy_.yyleng - 1); return 68 
break;
case 31: yy_.yytext = yy_.yytext.slice(1, yy_.yyleng - 1); return 69; 
break;
case 32: return 67 
break;
case 33: return 66    
break;
case 34: return 89      
break;
case 35: return 90      
break;
case 36: return 75             
break;
case 37: return 74           
break;
case 38: return 76  
break;
case 39: return 77        
break;
case 40: return 79          
break;
case 41: return 78        
break;
case 42: return 80        
break;
case 43: return 81       
break;
case 44: return 35      
break;
case 45: return 84      
break;
case 46: return 85      
break;
case 47: return 82           
break;
case 48: return 83           
break;
case 49: return 86             
break;
case 50: return 87              
break;
case 51: return 88             
break;
case 52: return 72   
break;
case 53: return 73       
break;
case 54: return 39         
break;
case 55: return 40       
break;
case 56: return 41       
break;
case 57: return 42     
break;
case 58: return 30    
break;
case 59: return 31  
break;
case 60: return 26;           
break;
case 61: return 9       
break;
case 62: errores.push(new Error(yy_.yylloc.first_line, yy_.yylloc.first_column + 1, TipoError.LEXICO, `Caracter no reconocido «${yy_.yytext}»`)) 
break;
case 63: return 5 
break;
}
},
rules: [/^(?:\n)/,/^(?:([\s\r\t]+))/,/^(?:entero\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:cadena\b)/,/^(?:caracter\b)/,/^(?:con\b)/,/^(?:valor\b)/,/^(?:imprimir\b)/,/^(?:si\b)/,/^(?:o\b)/,/^(?:de lo contrario\b)/,/^(?:para\b)/,/^(?:mientras\b)/,/^(?:hacer\b)/,/^(?:hasta que\b)/,/^(?:funcion\b)/,/^(?:retornar\b)/,/^(?:detener\b)/,/^(?:continuar\b)/,/^(?:ejecutar\b)/,/^(?:vector\b)/,/^(?:de\b)/,/^(?:procedimiento\b)/,/^(?:\/\/.*)/,/^(?:\/\*([^*]|\*+[^*/])*\*+\/)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:("((([^\n\"\\]|\\.))*)"))/,/^(?:('([^\'\\]|\\.)'))/,/^(?:([0-9]+\.[0-9]+\b))/,/^(?:([0-9]+\b))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:;)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}