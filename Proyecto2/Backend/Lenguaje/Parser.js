/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[2,5,19,31,32,36,37,38,70,72,73,74,75,76],$Vd=[1,37],$Ve=[1,48],$Vf=[1,55],$Vg=[1,49],$Vh=[1,50],$Vi=[1,51],$Vj=[1,52],$Vk=[1,53],$Vl=[1,54],$Vm=[1,57],$Vn=[1,56],$Vo=[1,58],$Vp=[19,24,34],$Vq=[1,84],$Vr=[1,83],$Vs=[1,85],$Vt=[1,86],$Vu=[1,87],$Vv=[1,88],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[9,20,25,34,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],$VF=[9,20,25,34,51,52,65,66],$VG=[1,135],$VH=[9,20,25],$VI=[9,20,25,34,51,52,59,60,61,62,63,64,65,66],$VJ=[9,20,25,34,51,52,53,54,59,60,61,62,63,64,65,66],$VK=[9,20,25,34,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66],$VL=[20,25];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VAR":7,"REASIGNACION":8,"TK_puntoComa":9,"REASIGNACION_VECTOR":10,"IMPRIMIR":11,"INCREMENTO_DECREMENTO":12,"CONDICIONAL_SI":13,"CICLO_PARA":14,"FUNCION":15,"RETORNAR":16,"DECLARACION_VECTOR":17,"LISTA_IDS":18,"TK_id":19,"TK_coma":20,"LISTA_EXPRESIONES":21,"EXPRESION":22,"LISTA_LISTAS_EXPRESIONES":23,"TK_corcheteAbre":24,"TK_corcheteCierra":25,"TIPO":26,"TK_con":27,"TK_valor":28,"TK_asignacion":29,"TK_vector":30,"TK_imprimir":31,"TK_if":32,"TK_parAbre":33,"TK_parCierra":34,"TK_llaveAbre":35,"TK_llaveCierra":36,"TK_para":37,"TK_funcion":38,"TERNARIO":39,"RELACIONALES":40,"LOGICOS":41,"ARITMETICOS":42,"CASTEO":43,"LLAMADA_FUNCION":44,"TK_int":45,"TK_decimal":46,"TK_string":47,"TK_char":48,"TK_true":49,"TK_false":50,"TK_interrogacion":51,"TK_dosPuntos":52,"TK_menos":53,"TK_mas":54,"TK_multiplicacion":55,"TK_division":56,"TK_potencia":57,"TK_modulo":58,"TK_igualdad":59,"TK_diferente":60,"TK_mayor":61,"TK_menor":62,"TK_mayorIgual":63,"TK_menorIgual":64,"TK_and":65,"TK_or":66,"TK_not":67,"TK_incremento":68,"TK_decremento":69,"TK_retornar":70,"TK_ejecutar":71,"TK_entero":72,"TK_double":73,"TK_cadena":74,"TK_boolean":75,"TK_caracter":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"TK_puntoComa",19:"TK_id",20:"TK_coma",24:"TK_corcheteAbre",25:"TK_corcheteCierra",27:"TK_con",28:"TK_valor",29:"TK_asignacion",30:"TK_vector",31:"TK_imprimir",32:"TK_if",33:"TK_parAbre",34:"TK_parCierra",35:"TK_llaveAbre",36:"TK_llaveCierra",37:"TK_para",38:"TK_funcion",45:"TK_int",46:"TK_decimal",47:"TK_string",48:"TK_char",49:"TK_true",50:"TK_false",51:"TK_interrogacion",52:"TK_dosPuntos",53:"TK_menos",54:"TK_mas",55:"TK_multiplicacion",56:"TK_division",57:"TK_potencia",58:"TK_modulo",59:"TK_igualdad",60:"TK_diferente",61:"TK_mayor",62:"TK_menor",63:"TK_mayorIgual",64:"TK_menorIgual",65:"TK_and",66:"TK_or",67:"TK_not",68:"TK_incremento",69:"TK_decremento",70:"TK_retornar",71:"TK_ejecutar",72:"TK_entero",73:"TK_double",74:"TK_cadena",75:"TK_boolean",76:"TK_caracter"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[18,1],[18,3],[21,1],[21,3],[23,3],[23,5],[7,6],[7,3],[7,5],[7,3],[7,6],[7,5],[17,11],[17,16],[17,9],[17,11],[8,3],[10,6],[10,9],[11,2],[13,7],[14,11],[15,8],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3],[22,4],[22,7],[39,5],[42,2],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[41,3],[41,3],[41,2],[12,3],[12,3],[43,4],[16,2],[44,4],[26,1],[26,1],[26,1],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return []
break;
case 3:
 if (Array.isArray($$[$0])) this.$.push(...$$[$0]); else this.$.push($$[$0]); 
break;
case 4:
 this.$ = Array.isArray($$[$0]) ? [...$$[$0]] : [$$[$0]]; 
break;
case 5: case 9: case 10: case 11: case 12: case 14: case 39: case 40: case 41: case 42: case 43: case 44:
this.$ = $$[$0]
break;
case 6: case 7: case 8: case 13: case 52:
this.$ = $$[$0-1]
break;
case 15:
errores.push(new Error(this._$.first_line, this._$.first_column + 1, TipoError.SINTACTICO, `No se esperaba «${yytext}»`))
break;
case 16: case 18:
 this.$ = [$$[$0]]; 
break;
case 17: case 19:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 20:
 this.$ = [$$[$0-1]]; 
break;
case 21:
 $$[$0-4].push($$[$0-1]); this.$ = $$[$0-4]; 
break;
case 22:
 this.$ = new DeclaracionID(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-5], $$[$0-1]); 
break;
case 23:
 this.$ = new DeclaracionID(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0-2], null); 
break;
case 24:
 this.$ = new DeclaracionID(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-4], $$[$0-1]); 
break;
case 25:
 this.$ = []; var idsList = $$[$0-1]; for (var i = 0; i < idsList.length; i++) { this.$.push(new DeclaracionID(_$[$0-2].first_line, _$[$0-2].first_column, idsList[i], $$[$0-2], null)); } 
break;
case 26:
 this.$ = []; var idsList = $$[$0-4]; var valoresList = $$[$0-1]; for (var i = 0; i < idsList.length; i++) { var val = (i < valoresList.length) ? valoresList[i] : null; this.$.push(new DeclaracionID(_$[$0-5].first_line, _$[$0-5].first_column, idsList[i], $$[$0-5], val)); } 
break;
case 27:
 this.$ = []; var idsList = $$[$0-3]; var valoresList = $$[$0-1]; for (var i = 0; i < idsList.length; i++) { var val = (i < valoresList.length) ? valoresList[i] : null; this.$.push(new DeclaracionID(_$[$0-4].first_line, _$[$0-4].first_column, idsList[i], $$[$0-4], val)); } 
break;
case 28:

            // Ejemplo: entero[] vector1 = vector entero[3];
            this.$ = new DeclaracionVector(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-7], $$[$0-10], null, 1, $$[$0-2]);
        
break;
case 29:

            // Ejemplo: caracter[][] vector2 = vector caracter[2][2];
            this.$ = new DeclaracionVector(_$[$0-15].first_line, _$[$0-15].first_column, $$[$0-10], $$[$0-15], null, 2, [$$[$0-5], $$[$0-1]]);
        
break;
case 30:

            // Ejemplo: cadena[] vector3 = ["Hola", "Mundo"];
            this.$ = new DeclaracionVector(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-5], $$[$0-8], $$[$0-2], 1, null);
        
break;
case 31:

            // Ejemplo: entero[][] vector4 = [[1,2],[3,4]];
            this.$ = new DeclaracionVector(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-5], $$[$0-10], $$[$0-2], 2, null);
        
break;
case 32:
this.$ = new Reasignacion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 33:
 this.$ = new ReasignacionVector(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-5], [$$[$0-3]], $$[$0]); 
break;
case 34:
 this.$ = new ReasignacionVector(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-8], [$$[$0-6], $$[$0-3]], $$[$0]); 
break;
case 35:
this.$ = new Imprimir(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 36:
this.$ = new Si(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1])
break;
case 38:
this.$ = new Funcion(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-6], $$[$0-1])
break;
case 45:
this.$ = new AccesoID(_$[$0].first_line, _$[$0].first_column, $$[$0]              )
break;
case 46:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.ENTERO)
break;
case 47:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.DOUBLE)
break;
case 48:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.CADENA)
break;
case 49:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.CARACTER)
break;
case 50:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, true, Tipo.BOOLEANO)
break;
case 51:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, false, Tipo.BOOLEANO)
break;
case 53:
 this.$ = new AccesoVector(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], [$$[$0-1]]); 
break;
case 54:
 this.$ = new AccesoVector(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-6], [$$[$0-4], $$[$0-1]]); 
break;
case 55:
 this.$ = new Ternario(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 56:
 this.$ = new Aritmetico(
                        _$[$0-1].first_line,
                        _$[$0-1].first_column,
                        new Primitivo(_$[$0-1].first_line, _$[$0-1].first_column, 0, Tipo.ENTERO),
                        $$[$0-1],
                        $$[$0]
                    ); 
break;
case 57: case 58: case 59: case 60: case 61: case 62:
this.$ = new Aritmetico(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 63: case 64: case 65: case 66: case 67: case 68:
this.$ = new Relacional(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 69: case 70:
this.$ = new Logico(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 71:
this.$ = new Logico(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 72:
 this.$ = new Incremento(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2]); 
break;
case 73:
 this.$ = new Decremento(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2]); 
break;
case 74:
 this.$ = new Casteo(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 75:
this.$ = new Retorno(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 76:
this.$ = new LlamadaFuncion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], undefined)
break;
case 77:
this.$ = Tipo.ENTERO
break;
case 78:
this.$ = Tipo.DOUBLE
break;
case 79:
this.$ = Tipo.CADENA
break;
case 80:
this.$ = Tipo.BOOLEANO
break;
case 81:
this.$ = Tipo.CARACTER
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,26:16,31:$V2,32:$V3,37:$V4,38:$V5,70:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{1:[3]},{2:$V0,5:[1,28],6:29,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,26:16,31:$V2,32:$V3,37:$V4,38:$V5,70:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{1:[2,2]},o($Vc,[2,4]),o($Vc,[2,5]),{9:[1,30]},{9:[1,31]},{9:[1,32]},o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),{9:[1,33]},o($Vc,[2,14]),o($Vc,[2,15]),{18:35,19:[1,34],24:[1,36]},{24:[1,38],29:$Vd,68:[1,39],69:[1,40]},{19:$Ve,22:41,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{33:[1,59]},{33:[1,60]},{26:61,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{19:$Ve,22:62,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},o($Vp,[2,77]),o($Vp,[2,78]),o($Vp,[2,79]),o($Vp,[2,80]),o($Vp,[2,81]),{1:[2,1]},o($Vc,[2,3]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,13]),{9:[1,64],20:[2,16],27:[1,63],29:[1,65]},{9:[1,66],20:[1,69],27:[1,67],29:[1,68]},{25:[1,70]},{19:$Ve,22:71,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:72,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{9:[1,73]},{9:[1,74]},{9:[2,35],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},o($VE,[2,39]),o([9,20,25,34,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],[2,40],{51:[1,89]}),o($VE,[2,41]),o($VE,[2,42]),o($VE,[2,43]),o($VE,[2,44]),o($VE,[2,45],{24:[1,90]}),o($VE,[2,46]),o($VE,[2,47]),o($VE,[2,48]),o($VE,[2,49]),o($VE,[2,50]),o($VE,[2,51]),{19:$Ve,22:91,26:92,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{19:$Ve,22:93,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:94,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:[1,95]},{19:$Ve,22:96,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{8:97,19:[1,98]},{19:[1,99]},{9:[2,75],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{28:[1,100]},o($Vc,[2,23]),{19:$Ve,22:101,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},o($Vc,[2,25]),{28:[1,102]},{19:$Ve,21:103,22:104,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:[1,105]},{19:[1,106],24:[1,107]},{9:[2,32],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{25:[1,108],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},o($Vc,[2,72]),o($Vc,[2,73]),{19:$Ve,22:109,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:110,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:111,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:112,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:113,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:114,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:115,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:116,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:117,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:118,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:119,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:120,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:121,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:122,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:123,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:124,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{34:[1,125],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{34:[1,126]},o($VF,[2,71],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB}),o($VE,[2,56]),{33:[1,127]},{34:[1,128],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{9:[1,129]},{29:$Vd},{33:[1,130]},{19:$Ve,22:131,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{9:[1,132],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{19:$Ve,21:133,22:104,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{9:[1,134],20:$VG},o($VH,[2,18],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD}),o([9,20,27,29],[2,17]),{29:[1,136]},{25:[1,137]},{24:[1,139],29:[1,138]},o($VI,[2,63],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VI,[2,64],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VI,[2,65],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VI,[2,66],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VI,[2,67],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VI,[2,68],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VF,[2,69],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB}),o([9,20,25,34,51,52,66],[2,70],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC}),o($VJ,[2,57],{55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VJ,[2,58],{55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VK,[2,59],{57:$Vu}),o($VK,[2,60],{57:$Vu}),o($VK,[2,61],{57:$Vu}),o($VK,[2,62],{57:$Vu}),{52:[1,140],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{25:[1,141],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},o($VE,[2,52]),{19:$Ve,22:142,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{34:[1,143]},{35:[1,144]},{19:$Ve,22:145,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{34:[1,146]},{9:[1,147],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},o($Vc,[2,24]),{9:[1,148],20:$VG},o($Vc,[2,27]),{19:$Ve,22:149,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{24:[1,151],30:[1,150]},{19:[1,152]},{19:$Ve,22:153,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:154,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{19:$Ve,22:155,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},o($VE,[2,53],{24:[1,156]}),o([9,20,25,34,51,52],[2,74],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD}),o($VE,[2,76]),{2:$V0,4:157,6:4,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,26:16,31:$V2,32:$V3,37:$V4,38:$V5,70:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{9:[1,158],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{35:[1,159]},o($Vc,[2,22]),o($Vc,[2,26]),o($VH,[2,19],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD}),{26:160,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{19:$Ve,21:161,22:104,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{29:[1,162]},{9:[2,33],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{25:[1,163],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},o($VE,[2,55]),{19:$Ve,22:164,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{2:$V0,6:29,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,26:16,31:$V2,32:$V3,36:[1,165],37:$V4,38:$V5,70:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{19:$Ve,22:166,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{2:$V0,4:167,6:4,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,26:16,31:$V2,32:$V3,37:$V4,38:$V5,70:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{24:[1,168]},{20:$VG,25:[1,169]},{24:[1,171],30:[1,170]},{29:[1,172]},{25:[1,173],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},o($Vc,[2,36]),{34:[1,174],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{2:$V0,6:29,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,26:16,31:$V2,32:$V3,36:[1,175],37:$V4,38:$V5,70:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{19:$Ve,22:176,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{9:[1,177]},{26:178,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{23:179,24:[1,180]},{19:$Ve,22:181,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},o($VE,[2,54]),{35:[1,182]},o($Vc,[2,38]),{25:[1,183],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},o($Vc,[2,30]),{24:[1,184]},{20:[1,186],25:[1,185]},{19:$Ve,21:187,22:104,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{9:[2,34],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{2:$V0,4:188,6:4,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,26:16,31:$V2,32:$V3,37:$V4,38:$V5,70:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},{9:[1,189]},{19:$Ve,22:190,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},{9:[1,191]},{24:[1,192]},{20:$VG,25:[1,193]},{2:$V0,6:29,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,26:16,31:$V2,32:$V3,36:[1,194],37:$V4,38:$V5,70:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb},o($Vc,[2,28]),{25:[1,195],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},o($Vc,[2,31]),{19:$Ve,21:196,22:104,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},o($VL,[2,20]),o($Vc,[2,37]),{24:[1,197]},{20:$VG,25:[1,198]},{19:$Ve,22:199,33:$Vf,39:42,40:43,41:44,42:45,43:46,44:47,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,53:$Vm,67:$Vn,71:$Vo},o($VL,[2,21]),{25:[1,200],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD},{9:[1,201]},o($Vc,[2,29])],
defaultActions: {3:[2,2],28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // Javascript
    let { errores } = require ('../Clases/Utilidades/Salida');
    const { Error } = require('../Clases/Utilidades/Error');
    const { TipoError } = require('../Clases/Utilidades/TipoError');

    // Javascript
    // Tipos
    const { Tipo } = require('../Clases/Utilidades/Tipo');
    // Expresiones
    const { Primitivo } = require('../Clases/Expresiones/Primitivo');
    const { AccesoID } = require('../Clases/Expresiones/AccesoID');
    const { Aritmetico } = require('../Clases/Expresiones/Aritmetico');
    const { Ternario } = require('../Clases/Expresiones/Ternario');
    const { Casteo } = require('../Clases/Expresiones/Casteo');
    const { Relacional } = require('../Clases/Expresiones/Relacional');
    const { Logico } = require('../Clases/Expresiones/Logico');
    const { Retorno } = require('../Clases/Expresiones/Retorno');
    const { LlamadaFuncion } = require('../Clases/Expresiones/LlamadaFuncion');
    // Instrucciones
    const { DeclaracionID } = require('../Clases/Instrucciones/DeclaracionID');
    const { Reasignacion } = require('../Clases/Instrucciones/Reasignacion');
    const { Imprimir } = require('../Clases/Instrucciones/Imprimir');
    const { Si } = require('../Clases/Instrucciones/Si');
    const { Funcion } = require('../Clases/Instrucciones/Funcion');
    const { Para } = require('../Clases/Instrucciones/Para');
    const { Incremento } = require('../Clases/Instrucciones/Incremento');
    const { Decremento } = require('../Clases/Instrucciones/Decremento');
    const { AccesoVector } = require('../Clases/Expresiones/AccesoVector');
    const { DeclaracionVector } = require('../Clases/Instrucciones/DeclaracionVector');
    const { ReasignacionVector } = require('../Clases/Instrucciones/ReasignacionVector');


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: return 72  
break;
case 3: return 73  
break;
case 4: return 75 
break;
case 5: return 49    
break;
case 6: return 50   
break;
case 7: return 74  
break;
case 8: return 76
break;
case 9: return 27     
break;
case 10: return 28   
break;
case 11: return 31
break;
case 12: return 32      
break;
case 13: return 'TK_else'    
break;
case 14: return 37    
break;
case 15: return 38 
break;
case 16: return 70
break;
case 17: return 71
break;
case 18: return 30  
break;
case 19: return 'TK_de'      
break;
case 20:/* Ignorar comentario de una línea */
break;
case 21:/* Ignorar comentario multilínea */
break;
case 22: return 19     
break;
case 23: yy_.yytext = yy_.yytext.slice(1, yy_.yyleng - 1); return 47 
break;
case 24: yy_.yytext = yy_.yytext.slice(1, yy_.yyleng - 1); return 48; 
break;
case 25: return 46 
break;
case 26: return 45    
break;
case 27: return 68      
break;
case 28: return 69      
break;
case 29: return 54             
break;
case 30: return 53           
break;
case 31: return 55  
break;
case 32: return 56        
break;
case 33: return 58          
break;
case 34: return 57        
break;
case 35: return 59        
break;
case 36: return 60       
break;
case 37: return 29      
break;
case 38: return 63      
break;
case 39: return 64      
break;
case 40: return 61           
break;
case 41: return 62           
break;
case 42: return 65             
break;
case 43: return 66              
break;
case 44: return 67             
break;
case 45: return 51   
break;
case 46: return 52       
break;
case 47: return 33         
break;
case 48: return 34       
break;
case 49: return 35       
break;
case 50: return 36     
break;
case 51: return 24    
break;
case 52: return 25  
break;
case 53: return 20;           
break;
case 54: return 9       
break;
case 55: errores.push(new Error(yy_.yylloc.first_line, yy_.yylloc.first_column + 1, TipoError.LEXICO, `Caracter no reconocido «${yy_.yytext}»`)) 
break;
case 56: return 5 
break;
}
},
rules: [/^(?:\n)/,/^(?:([\s\r\t]+))/,/^(?:entero\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:cadena\b)/,/^(?:caracter\b)/,/^(?:con\b)/,/^(?:valor\b)/,/^(?:imprimir\b)/,/^(?:si\b)/,/^(?:o\b)/,/^(?:para\b)/,/^(?:funcion\b)/,/^(?:retornar\b)/,/^(?:ejecutar\b)/,/^(?:vector\b)/,/^(?:de\b)/,/^(?:\/\/.*)/,/^(?:\/\*([^*]|\*+[^*/])*\*+\/)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:("((([^\n\"\\]|\\.))*)"))/,/^(?:('([^\'\\]|\\.)'))/,/^(?:([0-9]+\.[0-9]+\b))/,/^(?:([0-9]+\b))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:;)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}